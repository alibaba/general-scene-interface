/**
 * generate src/demo/entries.tsx
 */
import { existsSync, readFileSync, renameSync } from 'fs'
import { readdir, writeFile } from 'fs/promises'
import { dirname, resolve } from 'path'
import prettier from 'prettier'
import { argv } from 'process'
import { fileURLToPath, pathToFileURL } from 'url'

const __dirname = dirname(fileURLToPath(import.meta.url))
const indexFile = resolve(__dirname, './src/demo/entries.tsx')

export async function genEntries() {
	/**
	 * @type {string[]}
	 */
	const entries = await getEntries()

	const code = /* typescript */ `
		import { lazy } from 'react'

		/**
		 * @attention @warning
		 * THIS FILE IS GENERATED BY SCRIPTS. DO NOT EDIT IT MANUALLY.
		 * 自动生成的代码，不要手动修改！
		 */

		export const entries = [
			${entries
				.map(
					({ filename, name, category }) => `
				{
					key: '${filename.split('.test.')[0]}',
					name: '${name}',
					category: '${category}',
					getComponent: () => {
						const Test = lazy(() => import('../test/${filename}'))
						return <Test />
					}
				},
			`
				)
				.join('')}
		]
`

	const formattedCode = await prettier.format(code, {
		...(await prettier.resolveConfig(indexFile)),
		filepath: indexFile,
	})

	// console.log(formattedCode)
	await writeFile(indexFile, formattedCode)
}

export async function getEntries() {
	const dir = resolve(__dirname, './src/test')
	console.log('genEntries: dir', dir)
	const files = await readdir(dir)
	// console.log('genEntries: files', files)

	// batch rename
	// {
	// 	files.forEach((f) => {
	// 		if (f.startsWith('Test') && f.endsWith('.tsx')) {
	// 			const oldPath = resolve(dir, f)
	// 			let newName = f.replace('Test', '').replace('.tsx', '.test.tsx')
	// 			newName = newName[0].toLowerCase() + newName.slice(1)
	// 			const newPath = resolve(dir, newName)
	// 			renameSync(oldPath, newPath)
	// 		}
	// 	})
	// }

	const tests = files.filter((f) => f.endsWith('.test.tsx'))
	// console.log('genEntries: tests', tests)

	// make sure predictable order
	tests.sort()

	const result = []

	tests.forEach((testFilename) => {
		const testFile = resolve(dir, testFilename)
		const testCode = readFileSync(testFile, 'utf-8')

		const testNameRegex = /@test_name\s+(.*)/g
		const testCategoryRegex = /@test_category\s+(.*)/g

		let testName
		let testCategory

		// Find @test_name
		const testNameMatch = testNameRegex.exec(testCode)
		if (testNameMatch) {
			testName = testNameMatch[1]
		}

		// Find @test_category
		const testCategoryMatch = testCategoryRegex.exec(testCode)
		if (testCategoryMatch) {
			testCategory = testCategoryMatch[1]
		}

		if (testName && testCategory) {
			result.push({
				filename: testFilename,
				name: testName,
				category: testCategory,
			})
		} else {
			console.error('genEntries: test file', testFile, 'has no @test_name or @test_category')
		}
	})

	console.group('genEntries: found layers')
	result.forEach((n) => console.log('-', n))
	console.groupEnd('genEntries: found layers')

	return result
}

const isDirectCall = import.meta.url === pathToFileURL(argv[1]).href
if (isDirectCall) {
	// module was not imported but called directly
	console.log('genEntries: called directly')
	genEntries()
}
